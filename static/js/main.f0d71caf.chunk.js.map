{"version":3,"sources":["sources/counter.js","counter-button.js","utils/index.js","App.js","reportWebVitals.js","index.js"],"names":["getCounter","a","fetch","resp","json","data","Promise","resolve","reject","console","log","setCounter","input","inputParams","method","body","JSON","stringify","CounterButton","props","start","lowerLimit","upperLimit","useEffect","getUpdatedCounter","useState","Number","counter","setCounterValue","updatedCounter","setUpdatedCounter","apiResponseCode","setApiResponseCode","debouncedValue","value","delay","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","updateCounter","counter1","status","className","style","textAlign","display","opacity","onClick","type","max","onChange","e","target","isNaN","changeCounterValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0d71caf.chunk.js","sourcesContent":["// const fetch = require('fetch')\n\nconst getCounter = async() => {\n    try {\n        const resp = await fetch('https://interview-8e4c5-default-rtdb.firebaseio.com/front-end/counter1.json')\n        const data = await resp.json()\n        return new Promise((resolve, reject) => {\n            resolve(data)\n        })\n    } catch (e) {\n        return new Promise((resolve, reject) => {\n            console.log(e)\n            reject(e)\n        })\n    }\n}\n\nconst setCounter = async(input) => {\n    const inputParams = {\n        ...input\n    }\n    try {\n        const resp = await fetch('https://interview-8e4c5-default-rtdb.firebaseio.com/front-end.json', {\n            method: 'PUT',\n            body: JSON.stringify(inputParams)\n        })\n        return new Promise((resolve, reject) => {\n            resolve(resp)\n        })\n    } catch (e) {\n        return new Promise((resolve, reject) => {\n            reject(e)\n        })\n    }\n}\n\nexport { getCounter, setCounter}\n","import { useState, useEffect } from 'react'\nimport './counter-button.css'\nimport { getCounter, setCounter } from '../src/sources/counter'\nimport { useDebounce } from '../src/utils/index'\n\nfunction CounterButton (props) {\n    const { start=1, lowerLimit = 0, upperLimit = 1000 } = props\n    useEffect(async () => {\n        getUpdatedCounter()\n    }, [])\n    const [counter, setCounterValue] = useState(Number(start))\n    const [updatedCounter, setUpdatedCounter] = useState('')\n    const [apiResponseCode,setApiResponseCode] = useState('')\n    const debouncedValue = useDebounce(counter, 900)\n\n    useEffect(() => {\n        updateCounter(counter)\n    }, [debouncedValue])\n\n    const updateCounter = async (counter) => {\n        setApiResponseCode('pending')\n        try {\n            const resp = await setCounter({ counter1: counter })\n            if(resp.status === 200) {\n                setApiResponseCode('')\n                const data = await resp.json()\n                const { counter1 } = data\n                setUpdatedCounter(counter1)\n            }\n        } catch(e) {\n            setApiResponseCode('failure')\n            console.log(e)\n        }\n    }\n    const decrement = () => {\n        if(apiResponseCode) {\n            setApiResponseCode('')\n        }\n        if(counter-1 >= Number(lowerLimit)) {\n            setCounterValue(counter-1)\n        }\n    }\n    const increment = () => {\n        if(apiResponseCode) {\n            setApiResponseCode('')\n        }\n        if(counter+1 <= Number(upperLimit)) {\n            setCounterValue(counter+1)\n        }\n    }\n    const changeCounterValue = (e) => {\n        const value = +Number(e.target.value)\n        if(apiResponseCode) {\n            setApiResponseCode('')\n        }\n        if(e.target.value === '') {\n            setCounterValue(0)\n        }\n        if(isNaN(value)) {return}\n        if(value && Number(value) <= upperLimit) {\n            setCounterValue(value)\n        }\n    }\n    const getUpdatedCounter = async () => {\n        try {\n            const resp = await getCounter() \n            setCounterValue(Number(resp))\n            setUpdatedCounter(resp)\n        } catch(e) {\n            console.log(e)\n        }\n    }\nreturn (\n    <>\n        <div className=\"value-update-status\">\n            {apiResponseCode === 'failure' ? \n            <div style={{ textAlign: 'left' }}>Couldn't update last value</div> :\n            <div style={{ display: 'flex',  opacity: `${apiResponseCode ? '1': '0'}` }}><div className=\"loader\"/>{'Saving counter value'}</div>}\n        </div>\n        <div className=\"counter-button-container\">\n            <button className=\"decrement-button\" onClick={decrement}>-</button>\n            <input type=\"tel\" value={counter} max={upperLimit} className=\"input-box\" onChange={(e) => { changeCounterValue(e)}} />\n            <button className=\"increment-button\" onClick={increment}>+</button>\n        </div>\n        <div className=\"updated-counter-display\">\n            {`Counter value: ${updatedCounter}`}\n        </div>\n    </>\n)\n}\n\nexport default CounterButton\n","import { useState, useEffect } from 'react'\nexport function useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n      () => {\n        if(value){\n            const handler = setTimeout(() => {\n          setDebouncedValue(value);\n        }, delay);\n        return () => {\n          clearTimeout(handler);\n        };\n    }\n      },\n      [value, delay]\n    );\n    return debouncedValue;\n}","import './App.css';\nimport CounterButton from './counter-button'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"counter-button-consumer\">\n          <CounterButton />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}